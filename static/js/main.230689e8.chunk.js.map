{"version":3,"sources":["assets/audio/bell.mp3","components/Credits/index.ts","components/Credits/Credits.tsx","providers/ClockProvider.tsx","components/StartStop/index.ts","components/StartStop/StartStop.tsx","components/Reset/index.ts","components/Reset/Reset.tsx","components/Controls/index.ts","components/Controls/Controls.tsx","components/Session/index.ts","components/Session/Session.tsx","components/Break/index.ts","components/Break/Break.tsx","containers/Timer/index.ts","containers/Timer/Timer.tsx","containers/Clock/index.ts","containers/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["module","exports","Credits","className","initialContext","breakLength","sessionLength","timerLength","formattedTimerLength","timerIsStopped","typeOfTimerCurrentlyRunning","setBreakLength","setSessionLength","setTimerLength","setFormattedTimerLength","setTimerIsStopped","setTypeOfTimerCurrentlyRunning","setContext","Error","handleSetBreakLength","handleSetSessionLength","handleSetTimerIsStopped","handleIntervals","handleResetTimer","ClockContext","createContext","ClockContextProvider","children","useState","contextState","intervalId","setIntervalId","handleSetFormattedTimerLength","duration","formattedTime","mins","Math","floor","secs","myInterval","setInterval","handleDecrementTimerLength","clearInterval","handleSetTimerInitialValue","prevState","round","useEffect","Provider","value","opType","StartStop","useContext","id","onClick","Reset","type","Controls","Session","Break","Timer","document","getElementById","play","beepAudio","pause","currentTime","src","bell","Clock","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.230689e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.03c4155a.mp3\";","import Credits from \"./Credits\";\nexport default Credits;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Credits = () => {\n  return (\n    <div className=\"credits-container\">\n      Designed and Coded by Cameron Chardukian\n    </div>\n  );\n};\n\nexport default Credits;\n","import React, {\n  createContext,\n  Dispatch,\n  SetStateAction,\n  useState,\n  useEffect\n} from \"react\";\n\ntype Context = {\n  breakLength: number;\n  sessionLength: number;\n  timerLength: number;\n  formattedTimerLength: string;\n  timerIsStopped: boolean;\n  typeOfTimerCurrentlyRunning: string;\n  setBreakLength: Dispatch<SetStateAction<number>>;\n  setSessionLength: Dispatch<SetStateAction<number>>;\n  setTimerLength: Dispatch<SetStateAction<number>>;\n  setFormattedTimerLength: Dispatch<SetStateAction<string>>;\n  setTimerIsStopped: Dispatch<SetStateAction<boolean>>;\n  setTypeOfTimerCurrentlyRunning: Dispatch<SetStateAction<string>>;\n  setContext: Dispatch<SetStateAction<Context>>;\n  handleSetBreakLength: (opType: string) => void;\n  handleSetSessionLength: (opType: string) => void;\n  handleSetTimerIsStopped: () => void;\n  handleIntervals: () => void;\n  handleResetTimer: () => void;\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst initialContext: Context = {\n  breakLength: 5,\n  sessionLength: 25,\n  timerLength: 0,\n  formattedTimerLength: \"25:00\",\n  timerIsStopped: true,\n  typeOfTimerCurrentlyRunning: \"\",\n  setBreakLength: (): void => {},\n  setSessionLength: (): void => {},\n  setTimerLength: (): void => {},\n  setFormattedTimerLength: (): void => {},\n  setTimerIsStopped: (): void => {},\n  setTypeOfTimerCurrentlyRunning: (): void => {},\n  setContext: (): void => {\n    throw new Error(\"setContext function must be overridden.\");\n  },\n\n  handleSetBreakLength: (): void => {},\n  handleSetSessionLength: (): void => {},\n  handleSetTimerIsStopped: (): void => {},\n  handleIntervals: (): void => {},\n  handleResetTimer: (): void => {}\n};\n\nconst ClockContext = createContext<Context>(initialContext);\n\nconst ClockContextProvider = ({ children }: Props): JSX.Element => {\n  const [contextState, setContext] = useState<Context>(initialContext);\n  const [breakLength, setBreakLength] = useState<number>(5);\n  const [sessionLength, setSessionLength] = useState<number>(25);\n  const [timerIsStopped, setTimerIsStopped] = useState<boolean>(true);\n  const [timerLength, setTimerLength] = useState<number>(25);\n  const [formattedTimerLength, setFormattedTimerLength] = useState<string>(\n    \"25:00\"\n  );\n  const [intervalId, setIntervalId] = useState<any>();\n  const [\n    typeOfTimerCurrentlyRunning,\n    setTypeOfTimerCurrentlyRunning\n  ] = useState<string>(\"Session\");\n\n  const handleSetBreakLength = (opType: string) => {\n    if (opType === \"increment\" && breakLength <= 59) {\n      setBreakLength(breakLength + 1);\n    }\n    if (opType === \"decrement\" && breakLength >= 2) {\n      setBreakLength(breakLength - 1);\n    }\n  };\n\n  const handleSetSessionLength = (opType: string) => {\n    if (opType === \"increment\" && sessionLength <= 59) {\n      setSessionLength(sessionLength + 1);\n    } else if (opType === \"decrement\" && sessionLength >= 2) {\n      setSessionLength(sessionLength - 1);\n    }\n    if (timerIsStopped) {\n      if (opType === \"increment\" && sessionLength <= 59) {\n        setTimerLength(sessionLength + 1);\n        handleSetFormattedTimerLength(sessionLength + 1);\n      } else if (opType === \"decrement\" && sessionLength >= 2) {\n        setTimerLength(sessionLength - 1);\n        handleSetFormattedTimerLength(sessionLength - 1);\n      }\n    }\n  };\n\n  const handleSetFormattedTimerLength = (duration: number) => {\n    let formattedTime = \"\";\n    if (duration === 3600) {\n      formattedTime = \"60:00\";\n    } else {\n      const mins = Math.floor((duration % 3600) / 60);\n      const secs = Math.floor(duration % 60);\n      formattedTime +=\n        (mins < 10 ? \"0\" : \"\") + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n      formattedTime += \"\" + secs;\n    }\n    setFormattedTimerLength(formattedTime);\n  };\n\n  const handleSetTimerIsStopped = () => {\n    setTimerIsStopped(!timerIsStopped);\n    handleSetTimerInitialValue();\n    handleIntervals();\n  };\n\n  const handleIntervals = () => {\n    if (timerIsStopped) {\n      var myInterval = setInterval(handleDecrementTimerLength, 1000);\n      setIntervalId(myInterval);\n      return myInterval;\n    } else {\n      clearInterval(intervalId);\n    }\n  };\n\n  const handleSetTimerInitialValue = () => {\n    if (timerIsStopped && timerLength === 0) {\n      setTimerLength(sessionLength * 60);\n    }\n  };\n\n  const handleDecrementTimerLength = () => {\n    setTimerLength(prevState => prevState - Math.round((1 / 60) * 1000) / 1000);\n    handleSetFormattedTimerLength(timerLength * 60 - 1);\n  };\n  useEffect(() => {\n    if (timerLength <= 0 && !timerIsStopped) {\n      if (typeOfTimerCurrentlyRunning === \"Session\") {\n        setTimerLength(breakLength);\n        setTypeOfTimerCurrentlyRunning(\"Break\");\n      } else if (typeOfTimerCurrentlyRunning === \"Break\") {\n        setTimerLength(sessionLength);\n        setTypeOfTimerCurrentlyRunning(\"Session\");\n      }\n    }\n  }, [\n    intervalId,\n    timerLength,\n    breakLength,\n    timerIsStopped,\n    sessionLength,\n    typeOfTimerCurrentlyRunning\n  ]);\n\n  useEffect(() => {\n    handleSetFormattedTimerLength(timerLength * 60);\n  }, [timerLength]);\n\n  const handleResetTimer = () => {\n    setBreakLength(5);\n    setSessionLength(25);\n    setTimerLength(25);\n    setFormattedTimerLength(\"25:00\");\n    setTypeOfTimerCurrentlyRunning(\"Session\");\n    setTimerIsStopped(true);\n    clearInterval(intervalId);\n  };\n\n  return (\n    <ClockContext.Provider\n      value={{\n        ...contextState,\n        setContext,\n        breakLength,\n        sessionLength,\n        timerIsStopped,\n        typeOfTimerCurrentlyRunning,\n        timerLength,\n        setBreakLength,\n        setTimerIsStopped,\n        setTimerLength,\n        setSessionLength,\n        handleSetBreakLength,\n        handleSetSessionLength,\n        handleSetTimerIsStopped,\n        handleResetTimer,\n        formattedTimerLength\n      }}\n    >\n      {children}\n    </ClockContext.Provider>\n  );\n};\n\nexport { ClockContext, ClockContextProvider };\n","import StartStop from \"./StartStop\";\nexport default StartStop;\n","import React, { useContext } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\nimport \"./styles.scss\";\n\nconst StartStop = () => {\n  const { handleSetTimerIsStopped } = useContext(ClockContext);\n  return (\n    <div className=\"start-stop-container\">\n      <button id=\"start_stop\" onClick={handleSetTimerIsStopped}>\n        Start/Stop\n      </button>\n    </div>\n  );\n};\n\nexport default StartStop;\n","import Reset from \"./Reset\";\nexport default Reset;\n","import React, { useContext } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\nimport \"./styles.scss\";\n\nconst Reset = () => {\n  const { handleResetTimer } = useContext(ClockContext);\n  return (\n    <div className=\"reset-container\">\n      <button type=\"button\" id=\"reset\" onClick={handleResetTimer}>\n        Reset\n      </button>\n    </div>\n  );\n};\n\nexport default Reset;\n","import Controls from \"./Controls\";\nexport default Controls;\n","import React from \"react\";\nimport StartStop from \"../StartStop\";\nimport Reset from \"../Reset\";\n\nimport \"./styles.scss\";\n\nconst Controls = () => {\n  return (\n    <div className=\"controls-container\">\n      <StartStop />\n      <Reset />\n    </div>\n  );\n};\n\nexport default Controls;\n","import Session from \"./Session\";\nexport default Session;\n","import React, { useContext } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\nimport \"./styles.scss\";\n\nconst Session = () => {\n  const { handleSetSessionLength, sessionLength } = useContext(ClockContext);\n  return (\n    <div className=\"session-container\">\n      <div id=\"session-label\">Session Length</div>\n      <div className=\"session-info-flex-container\">\n        <button\n          type=\"button\"\n          id=\"session-decrement\"\n          onClick={() => handleSetSessionLength(\"decrement\")}\n        >\n          Decrement\n        </button>\n        <div id=\"session-length\">{sessionLength}</div>\n        <button\n          type=\"button\"\n          id=\"session-increment\"\n          onClick={() => handleSetSessionLength(\"increment\")}\n        >\n          Increment\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Session;\n","import Break from \"./Break\";\nexport default Break;\n","import React, { useContext } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\nimport \"./styles.scss\";\n\nconst Break = () => {\n  const { handleSetBreakLength, breakLength } = useContext(ClockContext);\n  return (\n    <div className=\"break-container\">\n      <div id=\"break-label\">Break Length</div>\n      <div className=\"break-info-flex-container\">\n        <button\n          className=\"br\"\n          type=\"button\"\n          id=\"break-decrement\"\n          onClick={() => handleSetBreakLength(\"decrement\")}\n        >\n          Decrement\n        </button>\n        <div id=\"break-length\">{breakLength}</div>\n        <button\n          type=\"button\"\n          id=\"break-increment\"\n          onClick={() => handleSetBreakLength(\"increment\")}\n        >\n          Increment\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Break;\n","import Timer from \"./Timer\";\nexport default Timer;\n","import React, { useContext, useEffect } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\n// @ts-ignore\nimport bell from \"../../assets/audio/bell.mp3\";\nimport \"./styles.scss\";\n\nconst Timer = () => {\n  const {\n    typeOfTimerCurrentlyRunning,\n    formattedTimerLength,\n    timerIsStopped\n  } = useContext(ClockContext);\n  useEffect(() => {\n    if (formattedTimerLength === \"00:00\") {\n      if (document.getElementById(\"beep\")) {\n        const beepAudio: any = document.getElementById(\"beep\");\n        beepAudio.play();\n      }\n    }\n    if (timerIsStopped && formattedTimerLength === \"25:00\") {\n      if (document.getElementById(\"beep\")) {\n        const beepAudio: any = document.getElementById(\"beep\");\n        beepAudio.pause();\n        beepAudio.currentTime = 0;\n      }\n    }\n  }, [formattedTimerLength, timerIsStopped]);\n  return (\n    <div className=\"timer-container\">\n      <div id=\"timer-label\">{typeOfTimerCurrentlyRunning}</div>\n      <div id=\"time-left\">{formattedTimerLength}</div>\n      <audio className=\"clip\" id=\"beep\" src={bell}></audio>\n    </div>\n  );\n};\n\nexport default Timer;\n","import Clock from \"./Clock\";\nexport default Clock;\n","import React from \"react\";\nimport \"./styles.scss\";\nimport Credits from \"../../components/Credits\";\nimport Controls from \"../../components/Controls\";\nimport Session from \"../../components/Session\";\nimport Break from \"../../components/Break\";\nimport Timer from \"../Timer\";\n\nconst Clock = () => {\n  return (\n    <div className=\"clock-container\">\n      <div className=\"title-text\">Pomodoro Clock</div>\n      <div className=\"break-session-flex-container\">\n        <Break />\n        <Session />\n      </div>\n      <Timer />\n      <Controls />\n      <Credits />\n    </div>\n  );\n};\n\nexport default Clock;\n","import React from \"react\";\nimport \"./App.css\";\nimport Clock from \"../src/containers/Clock\";\nimport { ClockContextProvider } from \"../src/providers/ClockProvider\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ClockContextProvider>\n        <header className=\"App-header\">\n          <Clock />\n        </header>\n      </ClockContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}