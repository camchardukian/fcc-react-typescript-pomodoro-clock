{"version":3,"sources":["assets/audio/bell.mp3","components/Credits/index.ts","components/Credits/Credits.tsx","providers/ClockProvider.tsx","components/StartStop/index.ts","components/StartStop/StartStop.tsx","components/Reset/index.ts","components/Reset/Reset.tsx","components/Controls/index.ts","components/Controls/Controls.tsx","components/Session/index.ts","components/Session/Session.tsx","components/Break/index.ts","components/Break/Break.tsx","containers/Timer/index.ts","containers/Timer/Timer.tsx","containers/Clock/index.ts","containers/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["module","exports","Credits","className","initialContext","breakLength","sessionLength","timerLength","resetTimerSoundCount","formattedTimerLength","timerIsStopped","typeOfTimerCurrentlyRunning","setBreakLength","setSessionLength","setTimerLength","setFormattedTimerLength","setTimerIsStopped","setResetTimerSoundCount","setTypeOfTimerCurrentlyRunning","setContext","Error","handleSetBreakLength","handleSetSessionLength","handleSetTimerIsStopped","handleIntervals","handleResetTimer","ClockContext","createContext","ClockContextProvider","children","useState","contextState","intervalId","setIntervalId","handleSetFormattedTimerLength","duration","formattedTime","roundedDuration","Math","round","mins","floor","secs","myInterval","setInterval","handleDecrementTimerLength","clearInterval","handleSetTimerInitialValue","prevState","useEffect","Provider","value","opType","StartStop","useContext","id","onClick","Reset","type","Controls","Session","Break","Timer","document","getElementById","play","beepAudio","pause","currentTime","src","bell","Clock","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4f18b16a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.03c4155a.mp3\";","import Credits from \"./Credits\";\nexport default Credits;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Credits = () => {\n  return (\n    <div className=\"credits-container\">\n      Designed and Coded by Cameron Chardukian\n    </div>\n  );\n};\n\nexport default Credits;\n","import React, {\n  createContext,\n  Dispatch,\n  SetStateAction,\n  useState,\n  useEffect\n} from \"react\";\ntype Context = {\n  breakLength: number;\n  sessionLength: number;\n  timerLength: number;\n  resetTimerSoundCount: number;\n  formattedTimerLength: string;\n  timerIsStopped: boolean;\n  typeOfTimerCurrentlyRunning: string;\n  setBreakLength: Dispatch<SetStateAction<number>>;\n  setSessionLength: Dispatch<SetStateAction<number>>;\n  setTimerLength: Dispatch<SetStateAction<number>>;\n  setResetTimerSoundCount: Dispatch<SetStateAction<number>>;\n  setFormattedTimerLength: Dispatch<SetStateAction<string>>;\n  setTimerIsStopped: Dispatch<SetStateAction<boolean>>;\n  setTypeOfTimerCurrentlyRunning: Dispatch<SetStateAction<string>>;\n  setContext: Dispatch<SetStateAction<Context>>;\n  handleSetBreakLength: (opType: string) => void;\n  handleSetSessionLength: (opType: string) => void;\n  handleSetTimerIsStopped: () => void;\n  handleIntervals: () => void;\n  handleResetTimer: () => void;\n};\ntype Props = {\n  children: React.ReactNode;\n};\nconst initialContext: Context = {\n  breakLength: 5,\n  sessionLength: 25,\n  timerLength: 0,\n  resetTimerSoundCount: 0,\n  formattedTimerLength: \"25:00\",\n  timerIsStopped: true,\n  typeOfTimerCurrentlyRunning: \"\",\n  setBreakLength: (): void => {},\n  setSessionLength: (): void => {},\n  setTimerLength: (): void => {},\n  setFormattedTimerLength: (): void => {},\n  setTimerIsStopped: (): void => {},\n  setResetTimerSoundCount: (): void => {},\n  setTypeOfTimerCurrentlyRunning: (): void => {},\n  setContext: (): void => {\n    throw new Error(\"setContext function must be overridden.\");\n  },\n  handleSetBreakLength: (): void => {},\n  handleSetSessionLength: (): void => {},\n  handleSetTimerIsStopped: (): void => {},\n  handleIntervals: (): void => {},\n  handleResetTimer: (): void => {}\n};\nconst ClockContext = createContext<Context>(initialContext);\nconst ClockContextProvider = ({ children }: Props): JSX.Element => {\n  const [contextState, setContext] = useState<Context>(initialContext);\n  const [breakLength, setBreakLength] = useState<number>(5);\n  const [sessionLength, setSessionLength] = useState<number>(25);\n  const [timerIsStopped, setTimerIsStopped] = useState<boolean>(true);\n  const [timerLength, setTimerLength] = useState<number>(25);\n  const [formattedTimerLength, setFormattedTimerLength] = useState<string>(\n    \"25:00\"\n  );\n  const [intervalId, setIntervalId] = useState<any>();\n  const [\n    typeOfTimerCurrentlyRunning,\n    setTypeOfTimerCurrentlyRunning\n  ] = useState<string>(\"session\");\n  const [resetTimerSoundCount, setResetTimerSoundCount] = useState<number>(0);\n  const handleSetBreakLength = (opType: string) => {\n    if (opType === \"increment\" && breakLength <= 59) {\n      setBreakLength(breakLength + 1);\n    }\n    if (opType === \"decrement\" && breakLength >= 2) {\n      setBreakLength(breakLength - 1);\n    }\n  };\n  const handleSetSessionLength = (opType: string) => {\n    if (opType === \"increment\" && sessionLength <= 59) {\n      setSessionLength(sessionLength + 1);\n    } else if (opType === \"decrement\" && sessionLength >= 2) {\n      setSessionLength(sessionLength - 1);\n    }\n    if (timerIsStopped) {\n      if (opType === \"increment\" && sessionLength <= 59) {\n        setTimerLength(sessionLength + 1);\n        handleSetFormattedTimerLength(sessionLength + 1);\n      } else if (opType === \"decrement\" && sessionLength >= 2) {\n        setTimerLength(sessionLength - 1);\n        handleSetFormattedTimerLength(sessionLength - 1);\n      }\n    }\n  };\n  const handleSetFormattedTimerLength = (duration: number) => {\n    let formattedTime = \"\";\n    const roundedDuration = Math.round(duration);\n    if (roundedDuration === 3600) {\n      formattedTime = \"60:00\";\n    } else {\n      const mins = Math.floor((roundedDuration % 3600) / 60);\n      const secs = Math.floor(roundedDuration % 60);\n      formattedTime +=\n        (mins < 10 ? \"0\" : \"\") + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n      formattedTime += \"\" + secs;\n    }\n    setFormattedTimerLength(formattedTime);\n  };\n  const handleSetTimerIsStopped = () => {\n    setTimerIsStopped(!timerIsStopped);\n    handleSetTimerInitialValue();\n    handleIntervals();\n  };\n  const handleIntervals = () => {\n    if (timerIsStopped) {\n      var myInterval = setInterval(handleDecrementTimerLength, 1000);\n      setIntervalId(myInterval);\n      return myInterval;\n    } else {\n      clearInterval(intervalId);\n    }\n  };\n  const handleSetTimerInitialValue = () => {\n    if (timerIsStopped && timerLength === 0) {\n      setTimerLength(sessionLength * 60);\n    }\n  };\n  const handleDecrementTimerLength = () => {\n    setTimerLength(prevState => prevState - Math.round((1 / 60) * 1000) / 1000);\n    handleSetFormattedTimerLength(timerLength * 60 - 1);\n  };\n  useEffect(() => {\n    if (timerLength <= 0 && !timerIsStopped) {\n      if (typeOfTimerCurrentlyRunning === \"session\") {\n        setTimerLength(breakLength);\n        setTypeOfTimerCurrentlyRunning(\"break\");\n      } else if (typeOfTimerCurrentlyRunning === \"break\") {\n        setTimerLength(sessionLength);\n        setTypeOfTimerCurrentlyRunning(\"session\");\n      }\n    }\n  }, [\n    intervalId,\n    timerLength,\n    breakLength,\n    timerIsStopped,\n    sessionLength,\n    typeOfTimerCurrentlyRunning\n  ]);\n  useEffect(() => {\n    handleSetFormattedTimerLength(timerLength * 60);\n  }, [timerLength]);\n  const handleResetTimer = () => {\n    setBreakLength(5);\n    setSessionLength(25);\n    setTimerLength(25);\n    setFormattedTimerLength(\"25:00\");\n    setTypeOfTimerCurrentlyRunning(\"session\");\n    setTimerIsStopped(true);\n    clearInterval(intervalId);\n    setResetTimerSoundCount(resetTimerSoundCount + 1);\n  };\n  return (\n    <ClockContext.Provider\n      value={{\n        ...contextState,\n        setContext,\n        breakLength,\n        sessionLength,\n        timerIsStopped,\n        typeOfTimerCurrentlyRunning,\n        timerLength,\n        resetTimerSoundCount,\n        setBreakLength,\n        setTimerIsStopped,\n        setTimerLength,\n        setSessionLength,\n        handleSetBreakLength,\n        handleSetSessionLength,\n        handleSetTimerIsStopped,\n        handleResetTimer,\n        formattedTimerLength\n      }}\n    >\n      {children}\n    </ClockContext.Provider>\n  );\n};\nexport { ClockContext, ClockContextProvider };\n","import StartStop from \"./StartStop\";\nexport default StartStop;\n","import React, { useContext } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\nimport \"./styles.scss\";\n\nconst StartStop = () => {\n  const { handleSetTimerIsStopped } = useContext(ClockContext);\n  return (\n    <div className=\"start-stop-container\">\n      <button id=\"start_stop\" onClick={handleSetTimerIsStopped}>\n        Start/Stop\n      </button>\n    </div>\n  );\n};\n\nexport default StartStop;\n","import Reset from \"./Reset\";\nexport default Reset;\n","import React, { useContext } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\nimport \"./styles.scss\";\n\nconst Reset = () => {\n  const { handleResetTimer } = useContext(ClockContext);\n  return (\n    <div className=\"reset-container\">\n      <button type=\"button\" id=\"reset\" onClick={handleResetTimer}>\n        Reset\n      </button>\n    </div>\n  );\n};\n\nexport default Reset;\n","import Controls from \"./Controls\";\nexport default Controls;\n","import React from \"react\";\nimport StartStop from \"../StartStop\";\nimport Reset from \"../Reset\";\n\nimport \"./styles.scss\";\n\nconst Controls = () => {\n  return (\n    <div className=\"controls-container\">\n      <StartStop />\n      <Reset />\n    </div>\n  );\n};\n\nexport default Controls;\n","import Session from \"./Session\";\nexport default Session;\n","import React, { useContext } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\nimport \"./styles.scss\";\n\nconst Session = () => {\n  const { handleSetSessionLength, sessionLength } = useContext(ClockContext);\n  return (\n    <div className=\"session-container\">\n      <div id=\"session-label\">Session Length</div>\n      <div className=\"session-info-flex-container\">\n        <button\n          type=\"button\"\n          id=\"session-decrement\"\n          onClick={() => handleSetSessionLength(\"decrement\")}\n        >\n          Decrement\n        </button>\n        <div id=\"session-length\">{sessionLength}</div>\n        <button\n          type=\"button\"\n          id=\"session-increment\"\n          onClick={() => handleSetSessionLength(\"increment\")}\n        >\n          Increment\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Session;\n","import Break from \"./Break\";\nexport default Break;\n","import React, { useContext } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\nimport \"./styles.scss\";\n\nconst Break = () => {\n  const { handleSetBreakLength, breakLength } = useContext(ClockContext);\n  return (\n    <div className=\"break-container\">\n      <div id=\"break-label\">Break Length</div>\n      <div className=\"break-info-flex-container\">\n        <button\n          className=\"br\"\n          type=\"button\"\n          id=\"break-decrement\"\n          onClick={() => handleSetBreakLength(\"decrement\")}\n        >\n          Decrement\n        </button>\n        <div id=\"break-length\">{breakLength}</div>\n        <button\n          type=\"button\"\n          id=\"break-increment\"\n          onClick={() => handleSetBreakLength(\"increment\")}\n        >\n          Increment\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Break;\n","import Timer from \"./Timer\";\nexport default Timer;\n","import React, { useContext, useEffect } from \"react\";\nimport { ClockContext } from \"../../providers/ClockProvider\";\n// @ts-ignore\nimport bell from \"../../assets/audio/bell.mp3\";\nimport \"./styles.scss\";\nconst Timer = () => {\n  const {\n    typeOfTimerCurrentlyRunning,\n    formattedTimerLength,\n    resetTimerSoundCount\n  } = useContext(ClockContext);\n  useEffect(() => {\n    if (formattedTimerLength === \"00:00\") {\n      if (document.getElementById(\"beep\")) {\n        const beepAudio: any = document.getElementById(\"beep\");\n        beepAudio.play();\n      }\n    }\n  }, [formattedTimerLength]);\n  useEffect(() => {\n    if (document.getElementById(\"beep\")) {\n      const beepAudio: any = document.getElementById(\"beep\");\n      beepAudio.pause();\n      beepAudio.currentTime = 0;\n    }\n  }, [resetTimerSoundCount]);\n  return (\n    <div className=\"timer-container\">\n      <div id=\"timer-label\">{typeOfTimerCurrentlyRunning}</div>\n      <div id=\"time-left\">{formattedTimerLength}</div>\n      <audio className=\"clip\" id=\"beep\" src={bell}></audio>\n    </div>\n  );\n};\nexport default Timer;\n","import Clock from \"./Clock\";\nexport default Clock;\n","import React from \"react\";\nimport \"./styles.scss\";\nimport Credits from \"../../components/Credits\";\nimport Controls from \"../../components/Controls\";\nimport Session from \"../../components/Session\";\nimport Break from \"../../components/Break\";\nimport Timer from \"../Timer\";\n\nconst Clock = () => {\n  return (\n    <div className=\"clock-container\">\n      <div className=\"title-text\">Pomodoro Clock</div>\n      <div className=\"break-session-flex-container\">\n        <Break />\n        <Session />\n      </div>\n      <Timer />\n      <Controls />\n      <Credits />\n    </div>\n  );\n};\n\nexport default Clock;\n","import React from \"react\";\nimport \"./App.css\";\nimport Clock from \"../src/containers/Clock\";\nimport { ClockContextProvider } from \"../src/providers/ClockProvider\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ClockContextProvider>\n        <header className=\"App-header\">\n          <Clock />\n        </header>\n      </ClockContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}